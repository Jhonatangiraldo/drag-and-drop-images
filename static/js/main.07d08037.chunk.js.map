{"version":3,"sources":["SingleImage/index.tsx","DropableZone/index.tsx","App/useGetPhotos.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ImagesType","SingleImage","DropAction","props","image","useDrag","type","item","collect","monitor","opacity","isDragging","dragRef","className","ref","style","src","medium","alt","original","DroppableZone","images","dropImage","photosLength","action","useDrop","accept","drop","isOver","map","Keep","keep","Reject","reject","useGetPhotos","useDebugValue","useState","photos","setPhotos","getPhotos","a","fetch","response","ok","json","data","slice","movie","console","warn","status","statusText","useEffect","index","elementToFilter","App","setKeep","setReject","filterImage","imageToFound","imageIndex","findIndex","droppedImage","length","Main","DndProvider","backend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07d08037.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrag } from 'react-dnd'\n\nexport interface Image {\n  medium: string;\n  original: string;\n}\n\nexport interface Props {\n  image: Image;\n}\n\nexport const ImagesType = 'ApplicationImages';\n\nfunction SingleImage(props: Props) {\n  const { image } = props;\n\n  const [{ opacity }, dragRef] = useDrag(\n    () => ({\n      type: ImagesType,\n      item: { ...image },\n      collect: (monitor) => ({\n        opacity: monitor.isDragging() ? 0.5 : 1\n      })\n    }),\n    []\n  )\n\n  return (\n    <div className=\"image\" key={image.medium} ref={dragRef} style={{ opacity }}>\n      <img src={image.medium} alt={image.original} />\n    </div>\n  );\n}\n\nexport default SingleImage;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport SingleImage, { Image, ImagesType } from \"../SingleImage\";\n\nexport enum DropAction {\n  keep = 'keep',\n  reject = 'reject',\n}\n\ninterface DropProps {\n  dropImage: (action: DropAction, image: Image) => void;\n  images: Image[];\n  photosLength: number;\n}\n\nconst DroppableZone = (props: DropProps & {className: string, action: DropAction}) => {\n  const { images, dropImage, photosLength, action, className } = props;\n  \n  const [{ isOver }, drop] = useDrop(\n    () => ({\n      accept: ImagesType,\n      drop: (image: Image) => dropImage(action, image),\n      collect: (monitor) => ({\n        isOver: !!monitor.isOver(),\n      }),\n    }),\n    [photosLength]\n  );\n\n\n  return (\n    <div className={className} ref={drop} >\n      {images.map((image: Image) => (\n        <SingleImage image={image} />\n      ))}\n    </div>\n  );\n}\n\nexport const Keep = (props: DropProps) => <DroppableZone {...props} action={DropAction.keep} className='right__up'/>;\n\nexport const Reject = (props: DropProps) => <DroppableZone {...props} action={DropAction.reject} className='right__bottom'/>;\n","import React, { useState, useEffect, useDebugValue} from 'react';\n\nconst url = 'http://api.tvmaze.com/shows';\n\nexport interface Image {\n  medium: string;\n  original: string;\n};\n\nexport interface Movie {\n  image: Image;\n}\n\nconst useGetPhotos = (): [Image[], (index: number) => Image | null] => {\n  useDebugValue('useGetPhotos');\n  const [photos, setPhotos] = useState([]);\n\n  const getPhotos = async () => {\n    try {\n      const response: Response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        setPhotos(data.slice(0, 12).map((movie: Movie) => movie.image));\n      } else {\n        console.warn(`\n          the response was not ok for getting images: ${response.status} - ${response.statusText}\n        `);\n        setPhotos([]);\n      }\n    } catch (err) {\n      console.warn(`there was an erro trying to get the images: ${err}`);\n      setPhotos([]);\n    }\n  }\n\n  const filterImage = (index: number): Image | null => {\n    if (index > -1) {\n      const elementToFilter = {...photos[index] as Image};\n      setPhotos([...photos.slice(0, index), ...photos.slice(index + 1)]);\n      return elementToFilter;\n    }\n    return null;\n  }\n\n  useEffect(() => {\n    getPhotos();\n  }, []);\n\n  return [photos, filterImage];\n}\n\nexport default useGetPhotos;","import React, { useState} from 'react';\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport './App.css';\nimport SingleImage from '../SingleImage';\nimport { DropAction, Keep, Reject } from '../DropableZone';\nimport useGetPhotos, {Image} from './useGetPhotos';\n\nfunction App() {\n  const [keep, setKeep] = useState([]);\n  const [reject, setReject] = useState([]);\n\n  const [photos, filterImage] = useGetPhotos();\n\n  const dropImage = (action: DropAction, imageToFound: Image) => {\n    const imageIndex: number = photos.findIndex((image: Image) => image.medium === imageToFound.medium);\n    const droppedImage: Image | null = filterImage(imageIndex);\n    if (!droppedImage) {\n      return;\n    }\n    \n    if (action === DropAction.keep) {\n      setKeep(images => ([...images, droppedImage as never]));\n    } else if (action === DropAction.reject) {\n      setReject(images => ([...images, droppedImage as never]));\n    }\n  };\n\n  return (\n    <main className=\"main\">\n      <section className=\"main__left\">\n        {\n          photos.map((image: Image) => <SingleImage image={image} key={image.medium}/>)\n        }\n      </section>\n      <section className=\"main__right\">\n        <Keep images={keep} dropImage={dropImage} photosLength={photos.length}/>\n        <Reject images={reject} dropImage={dropImage}  photosLength={photos.length}/>\n      </section>\n    </main>\n  );\n  \n}\n\n\nfunction Main() {\n  return <DndProvider backend={HTML5Backend}><App /></DndProvider>;\n}\nexport default Main;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}